#!/usr/bin/env python

from __future__ import print_function
import sys
import os
import subprocess
import tarfile

def popen_exec(args, cwd=None):
    output = subprocess.check_output(args, universal_newlines=True, cwd=cwd)
    return output.decode('utf-8')

if len(sys.argv) < 3:
    print('usage: make-tarball.py /path/to/output project-version', file=sys.stderr)
    exit(1)

def process_submodule(base_path):
    module_files = popen_exec(['git', 'ls-files'], cwd=base_path).split('\n')

    gitmodules_path = os.path.join(base_path, '.gitmodules') if base_path is not None else '.gitmodules'
    if not os.path.isfile(gitmodules_path):
        return module_files

    submodules = []
    with open(gitmodules_path) as fh:
        module_file_lines = fh.read().decode('utf-8').split('\n')
        for line in module_file_lines:
            line = line.strip()
            if line.startswith('path = '):
                submodules.append(line.replace('path = ', ''))

    for module_path in submodules:
        sub_path = os.path.join(base_path, module_path) if base_path is not None else module_path
        for subfile in process_submodule(sub_path):
            module_files.append(os.path.join(module_path, subfile))

    return module_files

outdir = sys.argv[1]
project_and_version = sys.argv[2]

all_files = []
try:
    all_files = process_submodule(None)
except subprocess.CalledProcessError, e:
    print(e.cmd, 'exited with code', e.returncode, file=sys.stderr)
    exit(1)

tarball = tarfile.open(os.path.join(outdir, project_and_version + '.tar.gz'), 'w:gz')

counter = 0
for filename in all_files:
    if filename == '': continue

    # Don't try to add empty directories to the tarball.
    # This would only occur when the directory in question
    # is a submodule; Git otherwise tracks files only.
    if os.path.isdir(str(filename)): continue

    counter += 1
    if (counter % 1000) == 0:
        print('Processed', counter, 'files...')

    tarball.add(filename, os.path.join(project_and_version, filename))

tarball.close()
